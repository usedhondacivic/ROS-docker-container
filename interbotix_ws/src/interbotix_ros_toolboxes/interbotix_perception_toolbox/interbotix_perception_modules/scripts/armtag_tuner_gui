#!/usr/bin/env python

import sys
import rospy
import rospkg
import signal
from python_qt_binding.QtCore import Qt
from python_qt_binding.QtGui import QFont, QIcon
from python_qt_binding.QtWidgets import *
from interbotix_perception_modules.armtag import InterbotixArmTagInterface

### @brief GUI to snap the AR tag pose on the arm and calculate the 'ref to arm base_link' transform
class ArmTagTunerGui(QWidget):
    def __init__(self):
        super(ArmTagTunerGui, self).__init__()
        r = rospkg.RosPack()
        self.pkg_path = r.get_path("interbotix_perception_modules")
        self.sp = None
        self.name_map = {}
        armtag_ns = rospy.get_namespace().strip("/")
        apriltag_ns = rospy.get_param("~apriltag_ns")
        self.position_only = rospy.get_param("~position_only")
        self.armtag = InterbotixArmTagInterface(armtag_ns, apriltag_ns, False)
        self.big_font = QFont("Helvetica", 14, QFont.Bold)
        self.small_font = QFont("Helvetica", 9, QFont.Bold)
        self.master_layout = QVBoxLayout()
        self.setWindowTitle('Interbotix | ArmTag Tuner GUI')
        self.setWindowIcon(QIcon(self.pkg_path + 
            "/images/gui/icon/Interbotix_Circle.png"))
        self.create_snap_block()
        self.create_display_block()
        self.setLayout(self.master_layout)
        self.show()

    ### @brief Creates the AR tag 'snap' button and spin box (to specify 'num_samples')
    def create_snap_block(self):
        horz_layout = QHBoxLayout()
        snap_button = self.create_button("Snap Pose", self.small_font)
        snap_button.clicked.connect(self.snap_pose)
        label = self.create_label("Num Samples", self.small_font)
        self.sp = QSpinBox()
        self.sp.setRange(1, 10)
        horz_layout.addStretch()
        horz_layout.addWidget(snap_button)
        horz_layout.addWidget(label)
        horz_layout.addWidget(self.sp)
        horz_layout.addStretch()
        self.master_layout.addLayout(horz_layout)

    ### @brief Creates a bunch of Read Only QLineEdit displays to show the 'ref to arm base_link' transform
    def create_display_block(self):
        grid_layout = QGridLayout()
        description_label = self.create_label("Snapped pose represents the transform from the\n'%s' frame to the '%s' frame." % (self.armtag.get_parent_frame(), self.armtag.get_child_frame()), self.small_font)
        grid_layout.addWidget(description_label, 0, 0, 1, 2)
        self.create_sub_component("X [m]", self.armtag.get_x, grid_layout, 1, 0)
        self.create_sub_component("Y [m]", self.armtag.get_y, grid_layout, 2, 0)
        self.create_sub_component("Z [m]", self.armtag.get_z, grid_layout, 3, 0)
        self.create_sub_component("Roll [rad]", self.armtag.get_roll, grid_layout, 1, 1)
        self.create_sub_component("Pitch [rad]", self.armtag.get_pitch, grid_layout, 2, 1)
        self.create_sub_component("Yaw [rad]", self.armtag.get_yaw, grid_layout, 3, 1)
        self.master_layout.addLayout(grid_layout)

    ### @brief Helper function to create a label and QLineEdit display
    ### @param name - label name
    ### @param get_func - function that gets the current value to put on the display
    ### @param parent_layout - reference to the QGridLayout where all sub-components are placed
    ### @param row - row where the sub-component should be placed in the parent layout
    ### @param col - column where the sub-component should be placed in the parent layout
    ### @param row_span - how many rows in the parent_layout the sub-component should take up
    ### @param col_span - how many columns in the parent layout the sub-component should take up
    def create_sub_component(self, name, get_func, parent_layout, row, col, row_span=1, col_span=1):
        horz_layout = QHBoxLayout()
        label = self.create_label(name, self.small_font)
        display = self.create_display(str(round(get_func(), 3)), True)
        horz_layout.addWidget(label)
        horz_layout.addWidget(display)
        parent_layout.addLayout(horz_layout, row, col, row_span, col_span)
        self.name_map[name] = {'display' : display, 'get_func' : get_func}

    ### @brief Create a QLabel with some custom settings
    ### @param text - message that the label should display
    ### @param font - type of font to use
    ### @return label - returns QLabel object
    def create_label(self, text, font):
        label = QLabel(text)
        label.setFont(font)
        label.setAlignment(Qt.AlignCenter)
        return label

    ### @brief Create a QPushButton with some custom settings
    ### @param text - message that the button should display
    ### @param font - type of font to use
    ### @return button - returns QPushButton object
    def create_button(self, text, font):
        button = QPushButton(text)
        button.setFont(font)
        return button

    ### @brief Creates a QLineEdit box with some custom settings
    ### @param text - text that should be displayed
    ### @param set_read_only - whether or not the QLineEdit box should be read only
    ### @return display - returns QLineEdit object
    def create_display(self, text, set_read_only=False):
        display = QLineEdit(text)
        display.setFont(self.small_font)
        display.setAlignment(Qt.AlignRight)
        display.setReadOnly(set_read_only)
        return display

    ### @brief Event handler when the 'Snap Pose' button is pressed (snaps the AR tag pose)
    def snap_pose(self):
        self.armtag.find_ref_to_arm_base_transform(num_samples=self.sp.value(), position_only=self.position_only)
        for info in self.name_map.values():
            info["display"].setText(str(round(info["get_func"](),3)))

if __name__ == '__main__':
    rospy.init_node('armtag_tuner_gui')
    app = QApplication(sys.argv)
    gui = ArmTagTunerGui()
    # Only kill the program at node shutdown
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    sys.exit(app.exec_())
